## WARNING ##
# This file is auotmaticly generated, any changes
# will be overwritten.

##################################################  
################  COMMON ENTITIES  ###############  
##################################################  

###############  input_text:  #################  
input_text:
  LOCKNAME_status_report:
    name: 'LOCKNAME Staus report'

###############  input_boolean:  #################  
input_boolean:
  LOCKNAME_lock_notifications:
    name: "Lock Notifications"
  LOCKNAME_dooraccess_notifications:
    name: "Door Notifications"
  LOCKNAME_garageacess_notifications:
    name: "Garage Notifications"
  LOCKNAME_reset_lock:
    name: "LOCKNAME reset lock"

###################  sensor:  ####################  
sensor:

- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'date_time_iso'
    - 'time_date'
    - 'time_utc'
    - 'beat'

###################  script    :  ####################
script:
  LOCKNAME_reset_lock:
    sequence:
      - service: script.LOCKNAME_manual_notify
        data_template:   
          title: "reset"
          message: "LOCKNAME"

  LOCKNAME_conditional_notify:
    sequence:
      - condition: template
        value_template: >-
          {% set inputbool = boolean %}
          {% if states(inputbool) == 'on'%}
            true
          {% else %}
            false
          {% endif %}
      - service: script.LOCKNAME_manual_notify
        data_template:   
          title: "{{title}}"
          message: "{{message}}"

###################  automation:  ####################  
automation:

    - alias: 'Status Report'
      trigger:
        platform: state
        entity_id: SENSORALARMTYPE, SENSORALARMLEVEL
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      action:
      - service: input_text.set_value
        data_template:
          entity_id: input_text.LOCKNAME_status_report
          value: >-
            {% set UC = 'SENSORALARMLEVEL' %}
            {% set AC = 'SENSORALARMTYPE' %}
            {% set UClc = states.sensor[UC.split('.')[-1]].last_changed %}
            {% set AClc = states.sensor[AC.split('.')[-1]].last_changed %}

            {% set usercode_value = states(UC) %}
            {% set alarm_type_value = states(AC) %}
            
            {% if 'alarm_type' in AC %}
              {% set alarm_type_general_actions = {
                '0':'No Status Reported',
                '9':'Lock Jammed',
                '17':'Keypad Lock Jammed',
                '21':'Manual Lock',
                '22':'Manual Unlock',
                '23':'HA Lock Jammed',
                '24':'HA Lock',
                '25':'HA Unlock',
                '26':'Auto Lock Jammed',
                '27':'Auto Lock',
                '32':'All Codes Deleted',
                '161':'Bad Code Entered',
                '167':'Battery Low',
                '168':'Battery Critical',
                '169':'Battery Too Low To Operate Lock' } %}
              {% set alarm_type_lock_actions = {
                '18':'Keypad Lock',
                '19':'Keypad Unlock',
                '162':'Lock Code Attempt Outside of Schedule' } %}
              {% set alarm_type_code_actions = {
                '33':'Code Deleted',
                '112':'Code Changed',
                '113':'Duplicate Code' } %}
            {% elif 'access_control' in AC %}
              {% set alarm_type_general_actions = {
                '1':'Manual Lock',
                '2':'Manual Unlock',
                '3':'RF Lock',
                '4':'RF Unlock',
                '7':'Manual not fully locked',
                '8':'RF not fully locked',
                '9':'Auto Lock locked',
                '10':'Auto Lock not fully locked',
                '11':'Lock Jammed',
                '16':'Keypad temporary disabled',
                '17':'Keypad busy' } %}
              {% set alarm_type_lock_actions = {
                '5':'Keypad Lock',
                '6':'Keypad Unlock' } %}
              {% set alarm_type_code_actions = {
                '12':'All User Codes Deleted',
                '13':'Single Code Deleted',
                '14':'New User Code Added',
                '15':'Duplicate Code' } %}
            {% endif %}
            {% if alarm_type_value in alarm_type_code_actions %}
              {{alarm_type_value}};{{ alarm_type_code_actions[alarm_type_value] }};{{usercode_value}}
            {% elif alarm_type_value in alarm_type_lock_actions  %}
              {{alarm_type_value}};{{ alarm_type_lock_actions[alarm_type_value] }};{{usercode_value}}
            {% elif alarm_type_value in alarm_type_general_actions %}
              {{alarm_type_value}};{{ alarm_type_general_actions[alarm_type_value] }}
            {% else %}
              {{-1}};Unknown Alarm Type Value {{ states(AC) }}
            {% endif %}

    - alias: CASE_LOCK_NAME Notifications
      trigger:
        platform: state
        entity_id: input_text.LOCKNAME_status_report
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
        - condition: template
          value_template: >-
            {% set report = states.input_text.LOCKNAME_status_report.state %}
            {% set a = report.split(';') %}
            {% if (a|length) != 3 or (a[2] == "0") %} 
              {{ true }}
            {% else %}
              {{ true }}
            {% endif %}
      action:
        - service: script.LOCKNAME_conditional_notify
          data_template:
            boolean: input_boolean.LOCKNAME_lock_notifications
            title: "Sensor Status Report"
            message: >-
              {% set report = states.input_text.LOCKNAME_status_report.state %}
              {% set a = report.split(';') %}
              {% set msg = "ID:" + a[0] + " MSG:" + a[1] %}
              {% if (a|length) == 3 %}
              {%   set msg = msg + " SLOT:" + a[2] %}
              {% endif %}
              {{ a[1] }}
    
    - alias: CASE_LOCK_NAME User Notifications
      trigger:
        platform: state
        entity_id: input_text.LOCKNAME_status_report
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
        - condition: template
          value_template: >-
            {% set report = states.input_text.LOCKNAME_status_report.state %}
            {% set a = report.split(';') %}
            {% if (a|length) == 3 and (a[2] | int > 0) %} 
              {{ true }}
            {% else %}
              {{ false }}
            {% endif %}
        - condition: template
          value_template: >-
            {% set report = states.input_text.LOCKNAME_status_report.state %}
            {% set a = report.split(';') %}
            {% set entity_id = 'notify_LOCKNAME_' + a[2] %}
            {% set notify = states['input_boolean'][entity_id].state %}
            {{ notify == "on" }}
      action:
        - service: script.LOCKNAME_manual_notify
          data_template:
            title: >- 
              {% set report = states.input_text.LOCKNAME_status_report.state %}
              {% set a = report.split(';') %}
              {{ a[1] }}
            message: >-
              {% set report = states.input_text.LOCKNAME_status_report.state %}
              {% set a = report.split(';') %}
              {% set entity_id = 'input_text.LOCKNAME_name_' + a[2] %}
              {% set user = states(entity_id) %}
              {{ user }}

    - alias: SENSORNAME Sensor Close
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      trigger:
        entity_id: DOORSENSORENTITYNAME
        platform: state
        to: 'off'
      action:
        - service: script.LOCKNAME_conditional_notify
          data_template:
            boolean: input_boolean.LOCKNAME_dooraccess_notifications
            title: "SENSORNAME"    
            message: "Closed"

    - alias: SENSORNAME Sensor Opened
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      trigger:
        entity_id: DOORSENSORENTITYNAME
        platform: state
        to: 'on'
      action:
        - service: script.LOCKNAME_conditional_notify
          data_template:
            boolean: input_boolean.LOCKNAME_dooraccess_notifications
            title: "SENSORNAME"    
            message: "Opened"
    
    - alias: CASE_LOCK_NAME Add Code
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      trigger:
        entity_id: ACTIVELOCKHEADER
        platform: state
        to: 'on'
      action:
        - service: ozw.set_usercode
          data_template:
            entity_id: LOCKENTITYNAME
            code_slot: >-
                {% set object_id = trigger.to_state.object_id %}
                {% set index = object_id.rfind('_') + 1 %}
                {% set code_slot = object_id[index:] %}
                {{ code_slot  }}
            usercode: >-
                {% set object_id = trigger.to_state.object_id %}
                {% set index = object_id.rfind('_') + 1 %}
                {% set code_slot = object_id[index:] %}    
                {% set codetext = 'LOCKNAME_pin_' + code_slot | string %}
                {% set code = states['input_text'][codetext].state %}
                {{ code | string }}
    
    - alias: CASE_LOCK_NAME Update Code
      trigger:
        entity_id: INPUTLOCKPINHEADER
        platform: state
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
        - condition: template
          value_template: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set index = object_id.rfind('_') + 1 %}
            {% set code_slot = object_id[index:] %}
            {% set b = 'input_boolean.enabled_LOCKNAME_' + code_slot | string %}
            {{ is_state(b, 'on') and (trigger.from_state.state != trigger.to_state.state)}}
      action:
        - service: persistent_notification.create
          data_template:
            title: "LOCKNAME LOCK MANAGER"
            message: >-
              {% set object_id = trigger.to_state.object_id %}
              {% set index = object_id.rfind('_') + 1 %}
              {% set code_slot = object_id[index:] %}
              {{ 'You changed the PIN for code  ' + code_slot | string + '. Please enable it in order to make it active.'}}
        - service: input_boolean.turn_off
          data_template:
            entity_id: >-
              {% set object_id = trigger.to_state.object_id %}
              {% set index = object_id.rfind('_') + 1 %}
              {% set code_slot = object_id[index:] %}
              {{ 'input_boolean.enabled_LOCKNAME_' + code_slot | string }}
    
    - alias: Reset CASE_LOCK_NAME
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      trigger:
        entity_id: input_boolean.LOCKNAME_reset_lock
        platform: state
        from: 'off'
        to: 'on'
      action:
        - service: script.LOCKNAME_reset_lock
        - service: input_boolean.turn_off
          entity_id: input_boolean.LOCKNAME_reset_lock
    
    - alias: CASE_LOCK_NAME Clear Code
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      trigger:
        entity_id: ACTIVELOCKHEADER
        platform: state
        to: 'off'
      action:
        - service: ozw.clear_usercode
          data_template:
            entity_id: LOCKENTITYNAME
            code_slot: >-
                {% set object_id = trigger.to_state.object_id %}
                {% set index = object_id.rfind('_') + 1 %}
                {% set code_slot = object_id[index:] %}
                {{ code_slot  }}

    - alias: CASE_LOCK_NAME Decrement Access Count
      trigger:
        platform: state
        entity_id: input_text.LOCKNAME_status_report
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
        - condition: template
          # Check for Keypad Unlock code
          value_template: >-
            {% set report = states.input_text.LOCKNAME_status_report.state %}
            {% set a = report.split(';') %}
            {% if (a|length) == 3 and (a[2] | int > 0) %} 
               {{ (a[0] | int == 19) or (a[0] | int == 6)  }}
            {% else %}
              {{ false }}
            {% endif %}
      action:
        - service: input_number.decrement
          data_template:
            entity_id: >-
              {% set report = states.input_text.LOCKNAME_status_report.state %}
              {% set a = report.split(';') %}
              {{ 'input_number.accesscount_LOCKNAME_' + a[2] }}
