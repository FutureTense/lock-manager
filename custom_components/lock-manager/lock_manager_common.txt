## WARNING ##
# This file is auotmaticly generated, any changes
# will be overwritten.

##################################################  
################  COMMON ENTITIES  ###############  
##################################################  

###############  input_text:  #################  
input_text:
  LOCKNAME_status_report:
    name: LOCKNAME Staus report
    
###############  input_number:  #################  
input_number:

  LOCKNAME_lock_command:
    name: CASE_LOCK_NAME Lock command
    min: 0
    max: 999

  LOCKNAME_lock_user:
    name: CASE_LOCK_NAME Lock user
    min: 0
    max: 999


###############  input_boolean:  #################  
input_boolean:
  LOCKNAME_lock_notifications:
    name: CASE_LOCK_NAME Lock Notifications
  LOCKNAME_dooraccess_notifications:
    name: CASE_LOCK_NAME Door Notifications
  LOCKNAME_garageacess_notifications:
    name: CASE_LOCK_NAME Garage Notifications
  LOCKNAME_reset_lock:
    name: CASE_LOCK_NAME reset lock

###################  sensor:  ####################  
sensor:

- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'date_time_iso'
    - 'time_date'
    - 'time_utc'
    - 'beat'


- platform: template
  sensors:
  
    LOCKNAME_ac_last_changed:
      friendly_name: CASE_LOCK_NAME AC Last Changed From Present
      unit_of_measurement: 'seconds'
      value_template: >-
        {% set CONTROL = 'input_number.LOCKNAME_lock_command' %}
        {% set CONTROLlc = states.input_number[CONTROL.split('.')[-1]].last_changed %}
        {{ (as_timestamp(now()) - as_timestamp(CONTROLlc)) | float }}

    LOCKNAME_uc_last_changed:
      friendly_name: CASE_LOCK_NAME UC Last Changed From Present
      unit_of_measurement: 'seconds'
      value_template: >-
        {% set CONTROL = 'input_number.LOCKNAME_lock_user' %}
        {% set CONTROLlc = states.input_number[CONTROL.split('.')[-1]].last_changed %}
        {{ (as_timestamp(now()) - as_timestamp(CONTROLlc)) | float }}
    

###################  script    :  ####################
script:
  LOCKNAME_reset_lock:
    sequence:
      - service: script.LOCKNAME_manual_notify
        data_template:   
          title: "reset"
          message: "LOCKNAME"

  LOCKNAME_conditional_notify:
    sequence:
      - condition: template
        value_template: >-
          {% set inputbool = boolean %}
          {% if states(inputbool) == 'on'%}
            true
          {% else %}
            false
          {% endif %}
      - service: script.LOCKNAME_manual_notify
        data_template:   
          title: "{{title}}"
          message: "{{message}}"

###################  automation:  ####################  
automation:


    - alias: LOCKNAME-ac-uc-sensors_last_changed_update
      initial_state: false
      trigger:
        - platform: time_pattern
          seconds: '/1'
      action:
        - service: homeassistant.update_entity
          entity_id: sensor.LOCKNAME_ac_last_changed
        - service: homeassistant.update_entity
          entity_id: sensor.LOCKNAME_uc_last_changed

    - alias: CASE_LOCK_NAME Lock Command
      trigger:
        platform: state
        entity_id: SENSORALARMTYPE
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
        # - condition: numeric_state
        #   entity_id: 'sensor.ac_last_changed'
        #   below: 5
      action:
        - service: input_number.set_value
          data_template:
            entity_id: input_number.LOCKNAME_lock_command
            value: >-
              {{ states.SENSORALARMTYPE.state | int}}

    - alias: CASE_LOCK_NAME User Command
      trigger:
        platform: state
        entity_id: SENSORALARMLEVEL
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on'
        # - condition: numeric_state
        #   entity_id: 'sensor.uc_last_changed'
        #   below: 5
      action:
        - service: input_number.set_value
          data_template:
            entity_id: input_number.LOCKNAME_lock_user
            value: >-
              {{ states.SENSORALARMLEVEL.state | int}}
        
    - alias: CASE_LOCK_NAME Locked state changed
      trigger:
        platform: state
        entity_id: lock.be469zp_connect_smart_deadbolt_locked
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
        - condition: template
          value_template: >-
            {% set report = states.input_text.LOCKNAME_status_report.state %}
            {% set a = report.split(';') %}
            {% set lockcmd = states.input_number.LOCKNAME_lock_command.state %}
            {% set lockuser = states.input_number.LOCKNAME_lock_user.state %}
            {% set lockcmd = a[0] %}
            {% set lockuser = a[2] %}
            {% set lockstate = states.lock.be469zp_connect_smart_deadbolt_locked.state %}
            {% if (lockstate=='locked') %}
            {%   set lockval=5          %}
            {% else                     %}
            {%   set lockval=6          %}
            {% endif                    %}
            {{ ((lockcmd | int) != (lockval | int)) and (lockuser | int ==0)}}
      action:
        - service: input_number.set_value
          data_template:
            entity_id: input_number.LOCKNAME_lock_command
            value: >-
              {% set lockstate = states.lock.be469zp_connect_smart_deadbolt_locked.state %}
              {% if (lockstate=='locked') %}
                {{ 66 }}
              {% else                     %}
                {{ 77 }}
              {% endif                    %}

    - alias: CASE_LOCK_NAME Status Report
      trigger:
        platform: state
        entity_id: input_number.LOCKNAME_lock_command, input_number.LOCKNAME_lock_user
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      action:
        - service: input_text.set_value
          data_template:
            entity_id: input_text.LOCKNAME_status_report
            value: >-
              {% set UC = 'SENSORALARMLEVEL' %}
              {% set AC = 'SENSORALARMTYPE' %}
              {% set UClc = states.sensor[UC.split('.')[-1]].last_changed %}
              {% set AClc = states.sensor[AC.split('.')[-1]].last_changed %}
  
              {% set usercode_value = states.input_number.LOCKNAME_lock_user.state | int | string  %}
              {% set alarm_type_value = states.input_number.LOCKNAME_lock_command.state | int | string %}
              
              {% if 'alarm_type' in AC %}
                {% set alarm_type_general_actions = {
                  '0':'No Status Reported',
                  '9':'Lock Jammed',
                  '17':'Keypad Lock Jammed',
                  '21':'Manual Lock',
                  '22':'Manual Unlock',
                  '23':'HA Lock Jammed',
                  '24':'HA Lock',
                  '25':'HA Unlock',
                  '26':'Auto Lock Jammed',
                  '27':'Auto Lock',
                  '32':'All Codes Deleted',
                  '161':'Bad Code Entered',
                  '167':'Battery Low',
                  '168':'Battery Critical',
                  '169':'Battery Too Low To Operate Lock' } %}
                {% set alarm_type_lock_actions = {
                  '18':'Keypad Lock',
                  '19':'Keypad Unlock',
                  '162':'Lock Code Attempt Outside of Schedule' } %}
                {% set alarm_type_code_actions = {
                  '33':'Code Deleted',
                  '112':'Code Changed',
                  '113':'Duplicate Code' } %}
              {% elif 'access_control' in AC %}
                {% set alarm_type_general_actions = {
                  '1':'Manual Lock',
                  '2':'Manual Unlock',
                  '3':'RF Lock',
                  '4':'RF Unlock',
                  '7':'Manual not fully locked',
                  '8':'RF not fully locked',
                  '9':'Auto Lock locked',
                  '10':'Auto Lock not fully locked',
                  '11':'Lock Jammed',
                  '16':'Keypad temporary disabled',
                  '17':'Keypad busy' } %}
                {% set alarm_type_lock_actions = {
                  '5':'Keypad Lock',
                  '6':'Keypad Unlock' } %}
                {% set alarm_type_code_actions = {
                  '12':'All User Codes Deleted',
                  '13':'Single Code Deleted',
                  '14':'New User Code Added',
                  '15':'Duplicate Code' } %}
              {% endif %}
              {% if alarm_type_value in alarm_type_code_actions %}
                {{alarm_type_value}};{{ alarm_type_code_actions[alarm_type_value] }};{{usercode_value}}
              {% elif alarm_type_value in alarm_type_lock_actions  %}
                {{alarm_type_value}};{{ alarm_type_lock_actions[alarm_type_value] }};{{usercode_value}}
              {% elif alarm_type_value in alarm_type_general_actions %}
                {{alarm_type_value}};{{ alarm_type_general_actions[alarm_type_value] }};{{usercode_value}}
              {% else %}
                {% if (alarm_type_value | int==66) %}
                  {{66}};HA - Locked;{{0}}
                {% elif (alarm_type_value | int==77) %}
                  {{77}};HA - Unlocked;{{0}}
                {% else %}
                  {{999}};Unknown Alarm Type Value;{{usercode_value}}
                {% endif %}
              {% endif %}

    - alias: CASE_LOCK_NAME Notifications
      trigger:
        platform: state
        entity_id: input_text.LOCKNAME_status_report
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
        # - condition: template
        #   value_template: >-
        #     {% set report = states.input_text.LOCKNAME_status_report.state %}
        #     {% set a = report.split(';') %}
        #     {% if (a|length) != 3 or (a[2] == "0") %} 
        #       {{ true }}
        #     {% else %}
        #       {{ true }}
        #     {% endif %}
      action:
        - delay: '00:00:01'
        - service: script.LOCKNAME_conditional_notify
          data_template:
            boolean: input_boolean.LOCKNAME_lock_notifications
            title: CASE_LOCK_NAME
            message: >-
              {% set report = states.input_text.LOCKNAME_status_report.state %}
              {% set a = report.split(';') %}
              {{ a[1] }}
    
    - alias: CASE_LOCK_NAME User Notifications
      trigger:
        platform: state
        entity_id: input_text.LOCKNAME_status_report
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
        - condition: template
          value_template: >-
            {% set report = states.input_text.LOCKNAME_status_report.state %}
            {% set a = report.split(';') %}
            {% if (a|length) == 3 and (a[2] | int > 0) %} 
              {{ true }}
            {% else %}
              {{ false }}
            {% endif %}
        - condition: template
          value_template: >-
            {% set report = states.input_text.LOCKNAME_status_report.state %}
            {% set a = report.split(';') %}
            {% set entity_id = 'notify_LOCKNAME_' + a[2] %}
            {% set notify = states['input_boolean'][entity_id].state %}
            {{ notify == "on" }}
      action:
        - delay: '00:00:01'
        - service: script.LOCKNAME_manual_notify
          data_template:
            title: >- 
              {% set report = states.input_text.LOCKNAME_status_report.state %}
              {% set a = report.split(';') %}
              {{ a[1] }}
            message: >-
              {% set report = states.input_text.LOCKNAME_status_report.state %}
              {% set a = report.split(';') %}
              {% set entity_id = 'input_text.LOCKNAME_name_' + a[2] %}
              {% set user = states(entity_id) %}
              {{ user }}

    - alias: CASE_LOCK_NAME Sensor Close
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      trigger:
        entity_id: binary_sensor.zd2105us_5_recessed_door_window_sensor_access_control_door_window_open
        platform: state
        to: 'off'
      action:
        - service: script.LOCKNAME_conditional_notify
          data_template:
            boolean: input_boolean.LOCKNAME_dooraccess_notifications
            title: CASE_LOCK_NAME 
            message: "Closed"

    - alias: CASE_LOCK_NAME Sensor Opened
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      trigger:
        entity_id: binary_sensor.zd2105us_5_recessed_door_window_sensor_access_control_door_window_open
        platform: state
        to: 'on'
      action:
        - service: script.LOCKNAME_conditional_notify
          data_template:
            boolean: input_boolean.LOCKNAME_dooraccess_notifications
            title: CASE_LOCK_NAME    
            message: "Opened"
    
    - alias: CASE_LOCK_NAME Add Code
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      trigger:
        entity_id: binary_sensor.active_LOCKNAME_1,binary_sensor.active_LOCKNAME_2,binary_sensor.active_LOCKNAME_3,binary_sensor.active_LOCKNAME_4,binary_sensor.active_LOCKNAME_5,binary_sensor.active_LOCKNAME_6
        platform: state
        to: 'on'
      action:
        - service: ozw.set_usercode
          data_template:
            entity_id: lock.be469zp_connect_smart_deadbolt_locked
            code_slot: >-
                {% set object_id = trigger.to_state.object_id %}
                {% set index = object_id.rfind('_') + 1 %}
                {% set code_slot = object_id[index:] %}
                {{ code_slot  }}
            usercode: >-
                {% set object_id = trigger.to_state.object_id %}
                {% set index = object_id.rfind('_') + 1 %}
                {% set code_slot = object_id[index:] %}    
                {% set codetext = 'LOCKNAME_pin_' + code_slot | string %}
                {% set code = states['input_text'][codetext].state %}
                {{ code | string }}
    
    - alias: CASE_LOCK_NAME Update Code
      trigger:
        entity_id: input_text.LOCKNAME_pin_1,input_text.LOCKNAME_pin_2,input_text.LOCKNAME_pin_3,input_text.LOCKNAME_pin_4,input_text.LOCKNAME_pin_5,input_text.LOCKNAME_pin_6
        platform: state
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
        - condition: template
          value_template: >-
            {% set object_id = trigger.to_state.object_id %}
            {% set index = object_id.rfind('_') + 1 %}
            {% set code_slot = object_id[index:] %}
            {% set b = 'input_boolean.enabled_LOCKNAME_' + code_slot | string %}
            {{ is_state(b, 'on') and (trigger.from_state.state != trigger.to_state.state)}}
      action:
        - service: persistent_notification.create
          data_template:
            title: CASE_LOCK_NAME LOCK MANAGER
            message: >-
              {% set object_id = trigger.to_state.object_id %}
              {% set index = object_id.rfind('_') + 1 %}
              {% set code_slot = object_id[index:] %}
              {{ 'You changed the PIN for code  ' + code_slot | string + '. Please enable it in order to make it active.'}}
        - service: input_boolean.turn_off
          data_template:
            entity_id: >-
              {% set object_id = trigger.to_state.object_id %}
              {% set index = object_id.rfind('_') + 1 %}
              {% set code_slot = object_id[index:] %}
              {{ 'input_boolean.enabled_LOCKNAME_' + code_slot | string }}
    
    - alias: CASE_LOCK_NAME Reset
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      trigger:
        entity_id: input_boolean.LOCKNAME_reset_lock
        platform: state
        from: 'off'
        to: 'on'
      action:
        - service: script.LOCKNAME_reset_lock
        - service: input_boolean.turn_off
          entity_id: input_boolean.LOCKNAME_reset_lock
    
    - alias: CASE_LOCK_NAME Clear Code
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
      trigger:
        entity_id: binary_sensor.active_LOCKNAME_1,binary_sensor.active_LOCKNAME_2,binary_sensor.active_LOCKNAME_3,binary_sensor.active_LOCKNAME_4,binary_sensor.active_LOCKNAME_5,binary_sensor.active_LOCKNAME_6
        platform: state
        to: 'off'
      action:
        - service: ozw.clear_usercode
          data_template:
            entity_id: lock.be469zp_connect_smart_deadbolt_locked
            code_slot: >-
                {% set object_id = trigger.to_state.object_id %}
                {% set index = object_id.rfind('_') + 1 %}
                {% set code_slot = object_id[index:] %}
                {{ code_slot  }}

    - alias: CASE_LOCK_NAME Decrement Access Count
      trigger:
        platform: state
        entity_id: input_text.LOCKNAME_status_report
      condition:
        - condition: state
          entity_id: 'binary_sensor.allow_automation'
          state: 'on' 
        - condition: template
          # Check for Keypad Unlock code
          value_template: >-
            {% set report = states.input_text.LOCKNAME_status_report.state %}
            {% set a = report.split(';') %}
            {% if (a|length) == 3 and (a[2] | int > 0) %} 
               {{ (a[0] | int == 19) or (a[0] | int == 6)  }}
            {% else %}
              {{ false }}
            {% endif %}
      action:
        - service: input_number.decrement
          data_template:
            entity_id: >-
              {% set report = states.input_text.LOCKNAME_status_report.state %}
              {% set a = report.split(';') %}
              {{ 'input_number.accesscount_LOCKNAME_' + a[2] }}
